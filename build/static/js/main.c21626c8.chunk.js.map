{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPerson","post","personIdToDelete","delete","personId","person","put","Notification","message","messageType","className","Filter","filterValue","filterChanged","value","onChange","PersonForm","props","onSubmit","addPerson","name","nameChanged","number","numberChanged","type","Persons","personsToShow","map","key","persons","setPersons","Person","onClick","personToDelete","window","confirm","personService","id","filter","App","useEffect","allPersons","useState","newName","setNewName","newNumber","setNewNumber","setFilterValue","setMessage","setMessageType","toLowerCase","includes","event","target","preventDefault","personToUpdate","find","changedPerson","returnedPerson","setTimeout","catch","error","concat","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c21626c8.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl).then(response => response.data)\r\n}\r\n\r\nconst create = newPerson => {\r\n    return axios.post(baseUrl,newPerson).then(response => response.data)\r\n}\r\n\r\nconst deletePerson = personIdToDelete => {\r\n    return axios.delete(`${baseUrl}/${personIdToDelete}`).then(response => response.data)\r\n}\r\n\r\nconst update = (personId, person) => {\r\n    return axios.put(`${baseUrl}/${personId}`,person).then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, deletePerson, update}","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst Notification = ({message, messageType}) => {\n  if (message === null) {\n    return null\n  }\n  if(messageType === 'success'){\n    return (\n      <div className=\"success\">\n        {message}\n      </div>\n    )\n  } else {\n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n  \n}\nconst Filter = ({filterValue, filterChanged}) => (\n  <div>\n    filter shown with: <input value={filterValue} onChange={filterChanged}/>\n  </div>\n)\n\nconst PersonForm = (props) => (\n  <form onSubmit={props.addPerson}>\n    <div>\n      name: <input value={props.name} onChange={props.nameChanged}/>\n    </div>\n    <div>\n      number: <input value={props.number} onChange={props.numberChanged}/>\n    </div>\n    <div>\n      <button type=\"submit\" >add</button>\n    </div>\n  </form>\n  )\n\nconst Persons = (props) => (\n  <div>\n    {props.personsToShow.map(person => \n      <Person key={person.name} person={person} persons = {props.persons} setPersons = {props.setPersons} />)}\n  </div>\n)\n\n\n\nconst Person = (props) => {\n  const handleDelete= (personToDelete) => {\n    if (window.confirm(`Delete ${personToDelete.name}?`)) {\n        personService\n          .deletePerson(personToDelete.id)\n          .then(response => {\n            props.setPersons(props.persons.filter(person => person.id !== personToDelete.id))\n            \n          })\n    }\n  }\n  return (\n  <p>{props.person.name} {props.person.number} <button onClick={() => handleDelete(props.person)}>delete</button></p>\n  )}\n\n\nconst App = () => {\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(allPersons => {\n      setPersons(allPersons)\n    })\n  },[])\n\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filterValue, setFilterValue ] = useState('')\n  const [ message, setMessage ] = useState(null)\n  const [ messageType, setMessageType ] = useState('success')\n\n  const handleNameInputChange = (event) => {\n    setNewName(event.target.value);\n  }\n\n  const handleNumberInputChange = (event) => {\n    setNewNumber(event.target.value);\n  }\n\n  const handleFilterValueChange = event => {\n    setFilterValue(event.target.value)\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    if (!newName || !newNumber ){\n      setMessage('name or number cannot be empty')\n      setMessageType('error')\n      setTimeout(() => {\n        setMessage(null)\n      }, 3000)\n    }else if(persons.map(person => person.name).includes(newName)){\n      const personToUpdate = persons.find(person => person.name === newName)\n      if(personToUpdate.number !== newNumber) {\n        if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n          const changedPerson = {...personToUpdate, number: newNumber}\n          personService\n            .update(personToUpdate.id, changedPerson)\n            .then(returnedPerson => {\n              setPersons(persons.map(person => person.id !== personToUpdate.id ?\n                person : returnedPerson))\n                setMessage(`Updated number of ${newName}`)\n                setMessageType('success')\n                setTimeout(() => {\n                  setMessage(null)\n                }, 3000)\n        \n                setNewName('')\n                setNewNumber('')\n            })\n            .catch(error => {\n              setMessage(error.response.data.error)\n              setMessageType('error')\n              setTimeout(() => {\n                setMessage(null)\n              }, 3000)\n            })\n        }\n      } else {\n        setMessage(`${newName} is already added to phonebook`)\n        setMessageType('error')\n        setTimeout(() => {\n          setMessage(null)\n        }, 3000)\n      }\n    } else {\n      const newPerson = {\n        name: newName,\n        number: newNumber\n      }\n      personService\n        .create(newPerson)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson));\n          setMessage(`Added ${newName}`)\n          setMessageType('success')\n          setTimeout(() => {\n            setMessage(null)\n          }, 3000)\n          setNewName('');\n          setNewNumber('');\n        })\n        .catch(error => {\n          console.log(error.response.data)\n          setMessage(error.response.data.error)\n          setMessageType('error')\n          setTimeout(() => {\n            setMessage(null)\n          }, 3000)\n        }\n\n        )\n    }\n  }\n\n\n  const personsToShow = persons.filter(person => person.name.toLowerCase().includes(filterValue.toLowerCase()))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message = {message} messageType={messageType}/>\n      <Filter filterValue = {filterValue} filterChanged={handleFilterValueChange}/>\n      <h2>Add a new</h2>\n      <PersonForm name={newName} number={newNumber}  addPerson={addPerson}\n      nameChanged={handleNameInputChange} numberChanged = {handleNumberInputChange}/> \n      <h2>Numbers</h2>\n      <Persons personsToShow={personsToShow} persons={persons} setPersons={setPersons}/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App/>, document.getElementById('root'))"],"sourceRoot":""}